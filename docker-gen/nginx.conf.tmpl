{{ range $host, $containers := groupByMulti $ "Env.SERVICE_NAME" "," }}
{{ if ne $host "server" }}
{{ if ne $host "registry" }}
{{ if ne $host "comm" }}
{{ if ne $host "agent-instance" }}
    upstream {{ $host }} {

    {{ range $index, $value := $containers }}

        {{ $addrLen := len $value.Addresses }}
        {{ $network := index $value.Networks 0 }}

        {{/* If only 1 port exposed, use that */}}
        {{ if eq $addrLen 1 }}
            {{ with $address := index $value.Addresses 0 }}
                # {{$value.Name}}
                server {{ $network.IP }}:{{ $address.HostPort }};
            {{ end }}

        {{/* If more than one port exposed, use the one matching VIRTUAL_PORT env var */}}
        {{ else if $value.Env.VIRTUAL_PORT }}
            {{ range $i, $address := $value.Addresses }}
                {{ if eq $address.Port $value.Env.VIRTUAL_PORT }}
                # {{$value.Name}}
                server {{ $network.IP }}:{{ $address.HostPort }};
                {{ end }}
            {{ end }}

        {{/* Else default to standard web port 80 */}}
        {{ else }}
            {{ range $i, $address := $value.Addresses }}
                {{ if eq $address.Port "80" }}
                # {{$value.Name}}
                server {{ $network.Gateway }}:{{ $address.HostPort }};
                {{ end }}
            {{ end }}
        {{ end }}
    {{ end }}
    }

    {{ end }}
{{ end }}
{{ end }}
{{ end }}
{{ end }}

server {

    location /oauth2 {
        proxy_pass  http://microauth/auth$request_uri;
    }

    location ~ ^/templates/(?<url>.*) {
        proxy_pass  http://templates/$url$is_args$args;
    }

    location /api {
        proxy_pass  http://microauth/auth$request_uri;
    }

    location /auth {
        proxy_pass  http://microauth;
    }

    location /connect {
        proxy_pass  http://publishing$request_uri;
    }

    location / {
        proxy_pass  http://frontend;
    }

    location /publish {
        proxy_pass  http://publishing;
    }

    location /indexer {
        proxy_pass  http://indexer;
    }

    location /api/search {
        proxy_pass  http://search;
    }

}
