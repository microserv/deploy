http {
    ##
    # Basic Settings
    ##
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    types_hash_max_size 2048;

    client_body_timeout 12;
    client_header_timeout 12;
    keepalive_timeout 15;
    send_timeout 10;

    client_body_buffer_size 10K;
    client_header_buffer_size 1k;
    client_max_body_size 8m;
    large_client_header_buffers 2 1k;

    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    keepalive_requests 100000;

    ##
    # SSL Settings
    ##
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # Dropping SSLv3, ref: POODLE
    ssl_prefer_server_ciphers on;

    ##
    # Logging Settings
    ##
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    ##
    # Gzip Settings
    ##
    gzip on;
    gzip_disable "msie6";

    ##
    # Upstreams
    ##

    {{ range $is_swagger, $containers := groupByMulti $ "Env.IS_SWAGGER" "," }}
    {{ if eq $is_swagger "true" }}
    upstream swagger {
    {{ range $index, $value := $containers }}
        {{ $addrLen := len $value.Addresses }}
        {{ $network := index $value.Networks 0 }}

        {{ range $i, $address := $value.Addresses }}
            {{ if eq $address.Port "8080" }}
            # {{$value.Name}}
            server {{ $network.IP }}:{{ $address.Port }};
            {{ end }}
        {{ end }}
    {{ end }}
    }
    {{ end }}
    {{ end }}

    {{ range $service, $containers := groupByMulti $ "Env.SERVICE_NAME" "," }}
    {{ if ne $service "mongodb" }}
    upstream {{ $service }} {
        {{ range $index, $value := $containers }}

            {{ $addrLen := len $value.Addresses }}
            {{ $network := index $value.Networks 0 }}

            {{ range $i, $address := $value.Addresses }}
                {{ if eq $address.Port "80" }}
                # {{$value.Name}} 3
                server {{ $network.Gateway }}:{{ $address.HostPort }};
                {{ end }}
            {{ end }}
        {{ end }}
    }

    {{ end }}
    {{ end }}


    server {
        listen 80;
        server_name despina.128.no;
        return 301 https://$host$request_uri;
    }

    server {
        server_name despina.128.no;
        listen 443 ssl;

        ssl_certificate /etc/letsencrypt/live/despina.128.no/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/despina.128.no/privkey.pem;

        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        ssl_prefer_server_ciphers on;
        ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA';
        ssl_session_timeout 1d;
        ssl_session_cache shared:SSL:50m;
        ssl_stapling on;
        ssl_stapling_verify on;
        add_header Strict-Transport-Security max-age=15768000;

    {{ range $service, $containers := groupByMulti $ "Env.SERVICE_NAME" "," }}
        {{ $nContainers := len $containers }}

        {{ if gt $nContainers 0 }}
        {{ if eq $service "microauth" }}
        location /oauth2 {
            proxy_pass  http://microauth/auth$request_uri;
        }

        location /api {
            proxy_pass  http://microauth/auth$request_uri;
        }

        location /auth {
            proxy_pass  http://microauth;
        }

        location /accounts {
             proxy_pass  http://microauth/auth$request_uri;
        }
        {{ end }}
        {{ end }}

        {{ if gt $nContainers 0 }}
        {{ if eq $service "templates" }}
        location ~ ^/templates(?<url>.*) {
            proxy_pass  http://templates$url$is_args$args;
        }
        {{ end }}
        {{ end }}


        {{ if gt $nContainers 0 }}
        {{ if eq $service "publishing" }}
        location /connect {
            proxy_pass  http://publishing$request_uri;
        }

        location /publish {
            proxy_pass  http://publishing;
        }
        {{ end }}
        {{ end }}

        {{ if gt $nContainers 0 }}
        {{ if eq $service "status" }}
        location ~ /status(?<url>.*) {
            proxy_pass  http://status$url$is_args$args;
        }
        {{ end }}
        {{ end }}

        {{ if gt $nContainers 0 }}
        {{ if eq $service "frontend" }}
        location / {
            proxy_pass  http://frontend;
        }
        {{ end }}
        {{ end }}

        {{ if gt $nContainers 0 }}
        {{ if eq $service "indexer" }}
        location /indexer {
            proxy_pass  http://indexer;
        }
        {{ end }}
        {{ end }}

        {{ if gt $nContainers 0 }}
        {{ if eq $service "spell-check" }}
        location /spell {
            proxy_pass  http://spell-check;
        }
        {{ end }}
        {{ end }}

        {{ if gt $nContainers 0 }}
        {{ if eq $service "search" }}
        location /api/search {
            proxy_pass  http://search;
        }
        {{ end }}
        {{ end }}


    {{ end }}

    {{ range $is_swagger, $containers := groupByMulti $ "Env.IS_SWAGGER" "," }}
    {{ if eq $is_swagger "true" }}
        {{ $nContainers := len $containers }}
        {{ if gt $nContainers 0 }}
        location ~ ^/swagger(?<url>.*) {

             if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
                #
                # Custom headers and headers various browsers *should* be OK with but aren't
                #
                add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';
                #
                # Tell client that this pre-flight info is valid for 20 days
                #
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain charset=UTF-8';
                add_header 'Content-Length' 0;
                return 204;
             }
             if ($request_method = 'POST') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
                add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';
             }
             if ($request_method = 'GET') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
                add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';
             }

            proxy_pass http://swagger$url$is_args$args;
        }
        {{ end }}
    {{ end }}
    {{ end }}
    }
}

stream {
{{ range $is_bootstrap, $containers := groupByMulti $ "Env.IS_BOOTSTRAP" "," }}
    {{ if eq $is_bootstrap "true" }}
    upstream bootstrap_nodes {
    {{ range $index, $value := $containers }}
        {{ $bootstrap_port := $value.Env.BOOTSTRAP_PORT }}
        {{ if $bootstrap_port }}
        {{ $addrLen := len $value.Addresses }}
        {{ $network := index $value.Networks 0 }}

        {{ range $i, $address := $value.Addresses }}
            {{ if eq $address.Port $value.Env.BOOTSTRAP_PORT }}
            # {{$value.Name}}
            server {{ $network.IP }}:{{ $address.Port }};
            {{ end }}
        {{ end }}
        {{ end }}
    {{ end }}
    }
    {{ end }}
{{ end }}

{{ range $is_bootstrap, $containers := groupByMulti $ "Env.IS_BOOTSTRAP" "," }}
{{ if eq $is_bootstrap "true" }}
    {{ $nContainers := len $containers }}
    {{ if gt $nContainers 0 }}
    server {
        listen 10002    udp;
        proxy_pass      bootstrap_nodes;
        error_log       /var/log/nginx/bootstrap_nodes.log info;
    }
    {{ end }}
{{ end }}
{{ end }}
}
